{
  "address": "0x8ae7E7B2a1c96A3FACbd916d7EE2BCF3ddF586d0",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "dropId",
          "type": "uint256"
        }
      ],
      "name": "DropCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mintPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "versions",
          "type": "uint8"
        }
      ],
      "name": "createDrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dropId",
          "type": "uint256"
        }
      ],
      "name": "drop",
      "outputs": [
        {
          "internalType": "contract Drop",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcdabe1b5a05898caa959e47a5f10fc7ec1513f531e6863d8b493c3dd4b2bcaf0",
  "receipt": {
    "to": null,
    "from": "0xd72dd6Aa62f47dBBe87dCFA64C7C502eaa479ba9",
    "contractAddress": "0x8ae7E7B2a1c96A3FACbd916d7EE2BCF3ddF586d0",
    "transactionIndex": 55,
    "gasUsed": "2747132",
    "logsBloom": "0x000000000000000000000000000000000000000000000000108000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000040000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000020000000000000040000000000000000000000000000000000000000000000000000",
    "blockHash": "0xa442c75a2dac50f508078942b4257a5207c8c6ae54a2b065badfccc48691238a",
    "transactionHash": "0xcdabe1b5a05898caa959e47a5f10fc7ec1513f531e6863d8b493c3dd4b2bcaf0",
    "logs": [
      {
        "transactionIndex": 55,
        "blockNumber": 8428106,
        "transactionHash": "0xcdabe1b5a05898caa959e47a5f10fc7ec1513f531e6863d8b493c3dd4b2bcaf0",
        "address": "0x8ae7E7B2a1c96A3FACbd916d7EE2BCF3ddF586d0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d72dd6aa62f47dbbe87dcfa64c7c502eaa479ba9"
        ],
        "data": "0x",
        "logIndex": 129,
        "blockHash": "0xa442c75a2dac50f508078942b4257a5207c8c6ae54a2b065badfccc48691238a"
      }
    ],
    "blockNumber": 8428106,
    "cumulativeGasUsed": "23575146",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "67792fb74e6938c44e99461bc7fb6eb9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dropId\",\"type\":\"uint256\"}],\"name\":\"DropCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"versions\",\"type\":\"uint8\"}],\"name\":\"createDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dropId\",\"type\":\"uint256\"}],\"name\":\"drop\",\"outputs\":[{\"internalType\":\"contract Drop\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Maxime Aubanel - @sshmaxime\",\"kind\":\"dev\",\"methods\":{\"createDrop(uint256,uint256,uint8)\":{\"details\":\"Create a DROP.\"},\"drop(uint256)\":{\"details\":\"Return the DROP item matching the drop id.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"totalSupply()\":{\"details\":\"Return the current supply.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Store\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Store.sol\":\"Store\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xaf297d12d8d4a57fe01a70f0ef38908f208e3faedc577056d0b728fa2f3ccf0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0xa8796bd16014cefb8c26449413981a49c510f92a98d6828494f5fd046223ced3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/Drop.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.14;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { ERC721 } from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport { ERC721Enumerable } from \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport { IERC721 } from \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport { ITokenInterface } from \\\"./tokens/ITokenInterface.sol\\\";\\n\\n/**\\n * @dev\\n */\\nenum DripStatus {\\n    DEFAULT,\\n    MUTATED\\n}\\n\\n/**\\n * @dev\\n */\\nstruct DripMutation {\\n    address token;\\n    uint256 tokenId;\\n}\\n\\n/**\\n * @dev\\n */\\nstruct Drip {\\n    uint256 versionId;\\n    //\\n    DripStatus status;\\n    DripMutation mutation;\\n}\\n\\n/**\\n * @author Maxime Aubanel - @sshmaxime\\n *\\n * @title Drop\\n */\\ncontract Drop is ERC721Enumerable, Ownable {\\n    string constant _name = \\\"DROP#\\\";\\n    string constant _symbol = \\\"DROP#\\\";\\n\\n    // URI of the drop\\n    string DROP_URI = \\\"\\\";\\n\\n    // Base URI of the drips\\n    string BASE_TOKEN_URI = \\\"\\\";\\n\\n    // Immutables\\n\\n    // The id of the DROP\\n    uint256 immutable DROP_ID;\\n\\n    // The maximum supply of the DROP\\n    uint256 immutable MAX_SUPPLY;\\n\\n    // The price to mint the Drip\\n    uint256 immutable PRICE;\\n\\n    // The number of versions\\n    uint256 immutable VERSIONS; // starts at version 1, cannot be 0\\n\\n    // Mappings\\n\\n    // Mapping from token id to Drip\\n    mapping(uint256 => Drip) tokenIdToDrip;\\n\\n    // Mapping from a token contract address to ITokenInterface\\n    mapping(address => ITokenInterface) tokenAddressToInterface;\\n\\n    // Events\\n\\n    // Event triggered when a Drip is minted\\n    event Minted(uint256 indexed tokenId);\\n\\n    // Event triggered when a Drip is mutated\\n    event Mutated(uint256 indexed tokenId);\\n\\n    constructor(\\n        uint256 id,\\n        uint256 _maxSupply,\\n        uint256 _price,\\n        uint256 _versions\\n    ) ERC721(string.concat(_name, Strings.toString(id)), string.concat(_symbol, Strings.toString(id))) {\\n        require(_versions > 0, \\\"INVALID_VERSIONS\\\");\\n\\n        DROP_ID = id;\\n        MAX_SUPPLY = _maxSupply;\\n        PRICE = _price;\\n        VERSIONS = _versions;\\n\\n        transferOwnership(tx.origin);\\n    }\\n\\n    /**\\n     * @dev Return the id of the DROP.\\n     */\\n    function dropId() public view returns (uint256) {\\n        return DROP_ID;\\n    }\\n\\n    /**\\n     * @dev Return the maximum supply of the DROP.\\n     */\\n    function maxSupply() public view returns (uint256) {\\n        return MAX_SUPPLY;\\n    }\\n\\n    /**\\n     * @dev Return the price of the mint.\\n     */\\n    function price() public view returns (uint256) {\\n        return PRICE;\\n    }\\n\\n    /**\\n     * @dev Return the versions of the mint.\\n     */\\n    function versions() public view returns (uint256) {\\n        return VERSIONS;\\n    }\\n\\n    /**\\n     * @dev Return the Drip matching the token id.\\n     */\\n    function drip(uint256 tokenId) public view returns (Drip memory) {\\n        require(tokenId < totalSupply(), \\\"INVALID_TOKEN_ID\\\");\\n        return tokenIdToDrip[tokenId];\\n    }\\n\\n    /**\\n     * @dev Load token interface.\\n     */\\n    function setTokenInterface(address tokenAddress, ITokenInterface _ITokenInterface) public onlyOwner {\\n        tokenAddressToInterface[tokenAddress] = _ITokenInterface;\\n    }\\n\\n    /**\\n     * @dev Get token interface.\\n     */\\n    function getTokenInterface(address tokenAddress) public view returns (ITokenInterface) {\\n        return tokenAddressToInterface[tokenAddress];\\n    }\\n\\n    /**\\n     * @dev Return the URI of the metadata of the DROP.\\n     */\\n    function dropURI() public view returns (string memory) {\\n        return DROP_URI;\\n    }\\n\\n    /**\\n     * @dev Load the baseURI of the metadata of the DROP.\\n     */\\n    function setDropURI(string memory newURI) public onlyOwner {\\n        DROP_URI = newURI;\\n    }\\n\\n    /**\\n     * @dev Load the baseURI of the Drips.\\n     */\\n    function setBaseTokenURI(string memory newURI) public onlyOwner {\\n        BASE_TOKEN_URI = newURI;\\n    }\\n\\n    /**\\n     * @dev Return the baseURI of the Drips.\\n     */\\n    function _baseURI() internal view override returns (string memory) {\\n        return BASE_TOKEN_URI;\\n    }\\n\\n    /**\\n     * @dev Mint a Drip.\\n     */\\n    function mint(uint256 versionId) external payable {\\n        uint256 tokenId = totalSupply();\\n\\n        // Token id to be minted needs to be below the max supply limit\\n        require(tokenId < maxSupply(), \\\"MAX_SUPPLY_REACHED\\\");\\n\\n        // Minter needs to mint a correct version of the DROP\\n        require(versionId <= VERSIONS, \\\"INVALID_VERSION\\\");\\n\\n        // Minter needs to provide the correct amount\\n        require(msg.value == PRICE, \\\"INVALID_FUNDS\\\");\\n\\n        _safeMint(msg.sender, tokenId);\\n        tokenIdToDrip[tokenId] = Drip({\\n            versionId: versionId,\\n            status: DripStatus.DEFAULT,\\n            mutation: DripMutation({ token: address(0), tokenId: 0 })\\n        });\\n\\n        emit Minted(tokenId);\\n    }\\n\\n    /**\\n     * @dev Mutate a Drip.\\n     */\\n    function mutate(uint256 dripToMutate, IERC721 token, uint256 tokenId) external {\\n        Drip storage _drip = tokenIdToDrip[dripToMutate];\\n\\n        require(dripToMutate < totalSupply(), \\\"OUT_OF_BOUND\\\");\\n        require(this.ownerOf(dripToMutate) == msg.sender, \\\"INVALID_OWNER\\\");\\n        require(_drip.status == DripStatus.DEFAULT, \\\"ALREADY_MUTATED\\\");\\n\\n        // now that basics checks have been made we need to check if the token mutating\\n        // needs to be handled in a non IERC721 way\\n        ITokenInterface tokenInterface = getTokenInterface(address(token));\\n\\n        // if token mutating is common, check the given contract or else check its interface\\n        if (address(tokenInterface) == address(0)) {\\n            require(token.ownerOf(tokenId) == msg.sender, \\\"INVALID_OWNER\\\");\\n        } else {\\n            require(tokenInterface.ownerOf(tokenId) == msg.sender, \\\"INVALID_OWNER\\\");\\n        }\\n\\n        _drip.status = DripStatus.MUTATED;\\n        _drip.mutation.token = address(token);\\n        _drip.mutation.tokenId = tokenId;\\n\\n        emit Mutated(dripToMutate);\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        uint balance = address(this).balance;\\n        payable(msg.sender).transfer(balance);\\n    }\\n}\\n\",\"keccak256\":\"0xee9a50fe2d8145d3df0d9a8f85548163c6f371efb2ed35ca149daee35816dc56\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/Store.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.14;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { ERC721Enumerable } from \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\n\\nimport { Drop } from \\\"./Drop.sol\\\";\\n\\n/**\\n * @author Maxime Aubanel - @sshmaxime\\n *\\n * @title Store\\n */\\ncontract Store is Ownable {\\n    // Mapping from drop id to drop contract\\n    mapping(uint256 => Drop) private dropIdToDrop;\\n\\n    // Total supply of DROPs\\n    uint256 TOTAL_SUPPLY = 0;\\n\\n    // Event emitted when a DROP gets created\\n    event DropCreated(uint256 indexed dropId);\\n\\n    /**\\n     * @dev Return the DROP item matching the drop id.\\n     */\\n    function drop(uint256 dropId) public view returns (Drop) {\\n        return dropIdToDrop[dropId];\\n    }\\n\\n    /**\\n     * @dev Return the current supply.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return TOTAL_SUPPLY;\\n    }\\n\\n    /**\\n     * @dev Create a DROP.\\n     */\\n    function createDrop(uint256 maxSupply, uint256 mintPrice, uint8 versions) public onlyOwner {\\n        uint256 dropId = TOTAL_SUPPLY;\\n        dropIdToDrop[dropId] = new Drop(dropId, maxSupply, mintPrice, versions);\\n        TOTAL_SUPPLY++;\\n\\n        emit DropCreated(dropId);\\n    }\\n}\\n\",\"keccak256\":\"0x355c4ed49a21aba8d9f818da660147e532983b4046440dc4a012b608ad9661e5\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/tokens/ITokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.14;\\n\\n/**\\n * @author Maxime Aubanel - @sshmaxime\\n *\\n * @title ITokenInterface\\n */\\ninterface ITokenInterface {\\n    function ownerOf(uint256) external returns (address);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x07057d9153b6864635bda90b5b41be9f6f14bfa38fa1fe3ba85a315a5ad03fb6\",\"license\":\"SEE LICENSE IN LICENSE\"}},\"version\":1}",
  "bytecode": "0x6080604052600060025534801561001557600080fd5b5061001f33610024565b610074565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b613052806100836000396000f3fe60806040523480156200001157600080fd5b50600436106200006a5760003560e01c80630d88b460146200006f57806318160ddd1462000088578063211d9a53146200009e578063715018a614620000e35780638da5cb5b14620000ed578063f2fde38b14620000ff575b600080fd5b62000086620000803660046200033a565b62000116565b005b6002546040519081526020015b60405180910390f35b620000ca620000af3660046200037b565b6000908152600160205260409020546001600160a01b031690565b6040516001600160a01b03909116815260200162000095565b62000086620001e5565b6000546001600160a01b0316620000ca565b620000866200011036600462000395565b620001fd565b6200012062000280565b600060025490508084848460405162000139906200032c565b9384526020840192909252604083015260ff166060820152608001604051809103906000f08015801562000171573d6000803e3d6000fd5b50600082815260016020526040812080546001600160a01b0319166001600160a01b0393909316929092179091556002805491620001af83620003c7565b909155505060405181907f01a6d33d95d2560a8c53f00317beb1d0364b3ecf2d43f647d2b4671df27f4f4590600090a250505050565b620001ef62000280565b620001fb6000620002dc565b565b6200020762000280565b6001600160a01b038116620002725760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6200027d81620002dc565b50565b6000546001600160a01b03163314620001fb5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640162000269565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b612c5680620003f083390190565b6000806000606084860312156200035057600080fd5b8335925060208401359150604084013560ff811681146200037057600080fd5b809150509250925092565b6000602082840312156200038e57600080fd5b5035919050565b600060208284031215620003a857600080fd5b81356001600160a01b0381168114620003c057600080fd5b9392505050565b600060018201620003e857634e487b7160e01b600052601160045260246000fd5b506001019056fe610120604081905260006101008190526200001d91600b9162000497565b506040805160208101918290526000908190526200003e91600c9162000497565b503480156200004c57600080fd5b5060405162002c5638038062002c568339810160408190526200006f916200053d565b6040518060400160405280600581526020016444524f502360d81b815250620000a385620001d660201b6200127c1760201c565b604051602001620000b6929190620005b2565b6040516020818303038152906040526040518060400160405280600581526020016444524f502360d81b815250620000f986620001d660201b6200127c1760201c565b6040516020016200010c929190620005b2565b60408051601f1981840301815291905281516200013190600090602085019062000497565b5080516200014790600190602084019062000497565b505050620001646200015e6200027a60201b60201c565b6200027e565b60008111620001ad5760405162461bcd60e51b815260206004820152601060248201526f494e56414c49445f56455253494f4e5360801b60448201526064015b60405180910390fd5b608084905260a083905260c082905260e0819052620001cc32620002d0565b5050505062000625565b60606000620001f0836200034f60201b6200130f1760201c565b60010190506000816001600160401b03811115620002125762000212620005d3565b6040519080825280601f01601f1916602001820160405280156200023d576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846200024757509392505050565b3390565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b620002da62000439565b6001600160a01b038116620003415760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620001a4565b6200034c816200027e565b50565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831062000399577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310620003c6576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310620003e557662386f26fc10000830492506010015b6305f5e1008310620003fe576305f5e100830492506008015b61271083106200041357612710830492506004015b6064831062000426576064830492506002015b600a831062000433576001015b92915050565b600a546001600160a01b03163314620004955760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620001a4565b565b828054620004a590620005e9565b90600052602060002090601f016020900481019282620004c9576000855562000514565b82601f10620004e457805160ff191683800117855562000514565b8280016001018555821562000514579182015b8281111562000514578251825591602001919060010190620004f7565b506200052292915062000526565b5090565b5b8082111562000522576000815560010162000527565b600080600080608085870312156200055457600080fd5b505082516020840151604085015160609095015191969095509092509050565b6000815160005b818110156200059757602081850181015186830152016200057b565b81811115620005a7576000828601525b509290920192915050565b6000620005cb620005c4838662000574565b8462000574565b949350505050565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620005fe57607f821691505b6020821081036200061f57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e0516125e262000674600039600081816106540152610fcb015260008181610512015261102d0152600081816105b80152610f670152600061033501526125e26000f3fe6080604052600436106101e35760003560e01c806358326b7a11610102578063a0712d6811610095578063d5abeb0111610064578063d5abeb01146105a9578063e985e9c5146105dc578063f2fde38b14610625578063f8b1cb3c1461064557600080fd5b8063a0712d6814610536578063a22cb46514610549578063b88d4fde14610569578063c87b56dd1461058957600080fd5b806379575294116100d157806379575294146104b05780638da5cb5b146104d057806395d89b41146104ee578063a035b1fe1461050357600080fd5b806358326b7a1461042e5780636352211e1461045b57806370a082311461047b578063715018a61461049b57600080fd5b80632a778c9b1161017a57806338bd05e01161014957806338bd05e0146103b95780633ccfd60b146103d957806342842e0e146103ee5780634f6ccce71461040e57600080fd5b80632a778c9b146103265780632f745c591461035957806330176e1314610379578063361c60361461039957600080fd5b8063095ea7b3116101b6578063095ea7b3146102b057806317f38959146102d257806318160ddd146102e757806323b872dd1461030657600080fd5b806301ffc9a7146101e857806306fdde031461021d57806307fdb4ea1461023f578063081812fc14610290575b600080fd5b3480156101f457600080fd5b50610208610203366004611fe3565b610678565b60405190151581526020015b60405180910390f35b34801561022957600080fd5b506102326106a3565b6040516102149190612058565b34801561024b57600080fd5b5061027861025a366004612080565b6001600160a01b039081166000908152600e60205260409020541690565b6040516001600160a01b039091168152602001610214565b34801561029c57600080fd5b506102786102ab36600461209d565b610735565b3480156102bc57600080fd5b506102d06102cb3660046120b6565b61075c565b005b3480156102de57600080fd5b50610232610876565b3480156102f357600080fd5b506008545b604051908152602001610214565b34801561031257600080fd5b506102d06103213660046120e2565b610885565b34801561033257600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006102f8565b34801561036557600080fd5b506102f86103743660046120b6565b6108b6565b34801561038557600080fd5b506102d06103943660046121af565b61094c565b3480156103a557600080fd5b506102d06103b43660046121f8565b61096b565b3480156103c557600080fd5b506102d06103d436600461221f565b610c4c565b3480156103e557600080fd5b506102d0610c82565b3480156103fa57600080fd5b506102d06104093660046120e2565b610cb9565b34801561041a57600080fd5b506102f861042936600461209d565b610cd4565b34801561043a57600080fd5b5061044e61044936600461209d565b610d67565b604051610214919061226e565b34801561046757600080fd5b5061027861047636600461209d565b610e34565b34801561048757600080fd5b506102f8610496366004612080565b610e94565b3480156104a757600080fd5b506102d0610f1a565b3480156104bc57600080fd5b506102d06104cb3660046121af565b610f2e565b3480156104dc57600080fd5b50600a546001600160a01b0316610278565b3480156104fa57600080fd5b50610232610f49565b34801561050f57600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006102f8565b6102d061054436600461209d565b610f58565b34801561055557600080fd5b506102d06105643660046122c6565b611159565b34801561057557600080fd5b506102d06105843660046122f9565b611164565b34801561059557600080fd5b506102326105a436600461209d565b61119c565b3480156105b557600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006102f8565b3480156105e857600080fd5b506102086105f736600461221f565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561063157600080fd5b506102d0610640366004612080565b611203565b34801561065157600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006102f8565b60006001600160e01b0319821663780e9d6360e01b148061069d575061069d826113e7565b92915050565b6060600080546106b290612379565b80601f01602080910402602001604051908101604052809291908181526020018280546106de90612379565b801561072b5780601f106107005761010080835404028352916020019161072b565b820191906000526020600020905b81548152906001019060200180831161070e57829003601f168201915b5050505050905090565b600061074082611437565b506000908152600460205260409020546001600160a01b031690565b600061076782610e34565b9050806001600160a01b0316836001600160a01b0316036107d95760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806107f557506107f581336105f7565b6108675760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060648201526084016107d0565b6108718383611496565b505050565b6060600b80546106b290612379565b61088f3382611504565b6108ab5760405162461bcd60e51b81526004016107d0906123b3565b610871838383611583565b60006108c183610e94565b82106109235760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084016107d0565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6109546116f4565b805161096790600c906020840190611eef565b5050565b6000838152600d6020526040902060085484106109b95760405162461bcd60e51b815260206004820152600c60248201526b13d55517d3d197d093d5539160a21b60448201526064016107d0565b6040516331a9108f60e11b81526004810185905233903090636352211e90602401602060405180830381865afa1580156109f7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1b9190612400565b6001600160a01b031614610a415760405162461bcd60e51b81526004016107d09061241d565b600060018083015460ff1690811115610a5c57610a5c612258565b14610a9b5760405162461bcd60e51b815260206004820152600f60248201526e1053149150511657d3555510551151608a1b60448201526064016107d0565b6001600160a01b038381166000908152600e60205260409020541680610b51576040516331a9108f60e11b81526004810184905233906001600160a01b03861690636352211e90602401602060405180830381865afa158015610b02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b269190612400565b6001600160a01b031614610b4c5760405162461bcd60e51b81526004016107d09061241d565b610be4565b6040516331a9108f60e11b81526004810184905233906001600160a01b03831690636352211e906024016020604051808303816000875af1158015610b9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbe9190612400565b6001600160a01b031614610be45760405162461bcd60e51b81526004016107d09061241d565b6001828101805460ff1916828002179055506002820180546001600160a01b0319166001600160a01b0386161790556003820183905560405185907fe0ff833392b9f001daba1da86ad0f9c9ab3f34ddd5a7dc6f7d3dffee0df8110e90600090a25050505050565b610c546116f4565b6001600160a01b039182166000908152600e6020526040902080546001600160a01b03191691909216179055565b610c8a6116f4565b6040514790339082156108fc029083906000818181858888f19350505050158015610967573d6000803e3d6000fd5b61087183838360405180602001604052806000815250611164565b6000610cdf60085490565b8210610d425760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b60648201526084016107d0565b60088281548110610d5557610d55612444565b90600052602060002001549050919050565b610d6f611f73565b6008548210610db35760405162461bcd60e51b815260206004820152601060248201526f1253959053125117d513d2d15397d25160821b60448201526064016107d0565b6000828152600d602090815260409182902082516060810190935280548352600180820154919284019160ff1690811115610df057610df0612258565b6001811115610e0157610e01612258565b81526040805180820190915260028301546001600160a01b03168152600390920154602083810191909152015292915050565b6000818152600260205260408120546001600160a01b03168061069d5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016107d0565b60006001600160a01b038216610efe5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016107d0565b506001600160a01b031660009081526003602052604090205490565b610f226116f4565b610f2c600061174e565b565b610f366116f4565b805161096790600b906020840190611eef565b6060600180546106b290612379565b6000610f6360085490565b90507f00000000000000000000000000000000000000000000000000000000000000008110610fc95760405162461bcd60e51b815260206004820152601260248201527113505617d4d55414131657d4915050d2115160721b60448201526064016107d0565b7f000000000000000000000000000000000000000000000000000000000000000082111561102b5760405162461bcd60e51b815260206004820152600f60248201526e24a72b20a624a22fab22a929a4a7a760891b60448201526064016107d0565b7f0000000000000000000000000000000000000000000000000000000000000000341461108a5760405162461bcd60e51b815260206004820152600d60248201526c494e56414c49445f46554e445360981b60448201526064016107d0565b61109433826117a0565b60408051606081018252838152600060208083018281528451808601865283815280830184905284860152858352600d90915292902081518155915160018084018054939493909160ff199091169083818111156110f4576110f4612258565b021790555060409182015180516002830180546001600160a01b0319166001600160a01b03909216919091179055602001516003909101555181907f176b02bb2d12439ff7a20b59f402cca16c76f50508b13ef3166a600eb719354a90600090a25050565b6109673383836117ba565b61116e3383611504565b61118a5760405162461bcd60e51b81526004016107d0906123b3565b61119684848484611888565b50505050565b60606111a782611437565b60006111b16118bb565b905060008151116111d157604051806020016040528060008152506111fc565b806111db8461127c565b6040516020016111ec92919061245a565b6040516020818303038152906040525b9392505050565b61120b6116f4565b6001600160a01b0381166112705760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107d0565b6112798161174e565b50565b606060006112898361130f565b600101905060008167ffffffffffffffff8111156112a9576112a9612123565b6040519080825280601f01601f1916602001820160405280156112d3576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846112dd57509392505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b831061134e5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef8100000000831061137a576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061139857662386f26fc10000830492506010015b6305f5e10083106113b0576305f5e100830492506008015b61271083106113c457612710830492506004015b606483106113d6576064830492506002015b600a831061069d5760010192915050565b60006001600160e01b031982166380ac58cd60e01b148061141857506001600160e01b03198216635b5e139f60e01b145b8061069d57506301ffc9a760e01b6001600160e01b031983161461069d565b6000818152600260205260409020546001600160a01b03166112795760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016107d0565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906114cb82610e34565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061151083610e34565b9050806001600160a01b0316846001600160a01b0316148061155757506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b8061157b5750836001600160a01b031661157084610735565b6001600160a01b0316145b949350505050565b826001600160a01b031661159682610e34565b6001600160a01b0316146115bc5760405162461bcd60e51b81526004016107d090612489565b6001600160a01b03821661161e5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016107d0565b61162b83838360016118ca565b826001600160a01b031661163e82610e34565b6001600160a01b0316146116645760405162461bcd60e51b81526004016107d090612489565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600a546001600160a01b03163314610f2c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107d0565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b610967828260405180602001604052806000815250611a0a565b816001600160a01b0316836001600160a01b03160361181b5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016107d0565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611893848484611583565b61189f84848484611a3d565b6111965760405162461bcd60e51b81526004016107d0906124ce565b6060600c80546106b290612379565b6118d684848484611b3e565b60018111156119455760405162461bcd60e51b815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e7365637574697665207472604482015274185b9cd9995c9cc81b9bdd081cdd5c1c1bdc9d1959605a1b60648201526084016107d0565b816001600160a01b0385166119a15761199c81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b6119c4565b836001600160a01b0316856001600160a01b0316146119c4576119c48582611bc6565b6001600160a01b0384166119e0576119db81611c63565b611a03565b846001600160a01b0316846001600160a01b031614611a0357611a038482611d12565b5050505050565b611a148383611d56565b611a216000848484611a3d565b6108715760405162461bcd60e51b81526004016107d0906124ce565b60006001600160a01b0384163b15611b3357604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611a81903390899088908890600401612520565b6020604051808303816000875af1925050508015611abc575060408051601f3d908101601f19168201909252611ab99181019061255d565b60015b611b19573d808015611aea576040519150601f19603f3d011682016040523d82523d6000602084013e611aef565b606091505b508051600003611b115760405162461bcd60e51b81526004016107d0906124ce565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061157b565b506001949350505050565b6001811115611196576001600160a01b03841615611b84576001600160a01b03841660009081526003602052604081208054839290611b7e908490612590565b90915550505b6001600160a01b03831615611196576001600160a01b03831660009081526003602052604081208054839290611bbb9084906125a7565b909155505050505050565b60006001611bd384610e94565b611bdd9190612590565b600083815260076020526040902054909150808214611c30576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090611c7590600190612590565b60008381526009602052604081205460088054939450909284908110611c9d57611c9d612444565b906000526020600020015490508060088381548110611cbe57611cbe612444565b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480611cf657611cf66125bf565b6001900381819060005260206000200160009055905550505050565b6000611d1d83610e94565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b6001600160a01b038216611dac5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016107d0565b6000818152600260205260409020546001600160a01b031615611e115760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016107d0565b611e1f6000838360016118ca565b6000818152600260205260409020546001600160a01b031615611e845760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016107d0565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b828054611efb90612379565b90600052602060002090601f016020900481019282611f1d5760008555611f63565b82601f10611f3657805160ff1916838001178555611f63565b82800160010185558215611f63579182015b82811115611f63578251825591602001919060010190611f48565b50611f6f929150611fb8565b5090565b6040805160608101909152600080825260208201908152602001611fb3604051806040016040528060006001600160a01b03168152602001600081525090565b905290565b5b80821115611f6f5760008155600101611fb9565b6001600160e01b03198116811461127957600080fd5b600060208284031215611ff557600080fd5b81356111fc81611fcd565b60005b8381101561201b578181015183820152602001612003565b838111156111965750506000910152565b60008151808452612044816020860160208601612000565b601f01601f19169290920160200192915050565b6020815260006111fc602083018461202c565b6001600160a01b038116811461127957600080fd5b60006020828403121561209257600080fd5b81356111fc8161206b565b6000602082840312156120af57600080fd5b5035919050565b600080604083850312156120c957600080fd5b82356120d48161206b565b946020939093013593505050565b6000806000606084860312156120f757600080fd5b83356121028161206b565b925060208401356121128161206b565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff8084111561215457612154612123565b604051601f8501601f19908116603f0116810190828211818310171561217c5761217c612123565b8160405280935085815286868601111561219557600080fd5b858560208301376000602087830101525050509392505050565b6000602082840312156121c157600080fd5b813567ffffffffffffffff8111156121d857600080fd5b8201601f810184136121e957600080fd5b61157b84823560208401612139565b60008060006060848603121561220d57600080fd5b8335925060208401356121128161206b565b6000806040838503121561223257600080fd5b823561223d8161206b565b9150602083013561224d8161206b565b809150509250929050565b634e487b7160e01b600052602160045260246000fd5b81518152602082015160808201906002811061229a57634e487b7160e01b600052602160045260246000fd5b80602084015250604083015160018060a01b038151166040840152602081015160608401525092915050565b600080604083850312156122d957600080fd5b82356122e48161206b565b91506020830135801515811461224d57600080fd5b6000806000806080858703121561230f57600080fd5b843561231a8161206b565b9350602085013561232a8161206b565b925060408501359150606085013567ffffffffffffffff81111561234d57600080fd5b8501601f8101871361235e57600080fd5b61236d87823560208401612139565b91505092959194509250565b600181811c9082168061238d57607f821691505b6020821081036123ad57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b60006020828403121561241257600080fd5b81516111fc8161206b565b6020808252600d908201526c24a72b20a624a22fa7aba722a960991b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6000835161246c818460208801612000565b835190830190612480818360208801612000565b01949350505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906125539083018461202c565b9695505050505050565b60006020828403121561256f57600080fd5b81516111fc81611fcd565b634e487b7160e01b600052601160045260246000fd5b6000828210156125a2576125a261257a565b500390565b600082198211156125ba576125ba61257a565b500190565b634e487b7160e01b600052603160045260246000fdfea164736f6c634300080e000aa164736f6c634300080e000a",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200006a5760003560e01c80630d88b460146200006f57806318160ddd1462000088578063211d9a53146200009e578063715018a614620000e35780638da5cb5b14620000ed578063f2fde38b14620000ff575b600080fd5b62000086620000803660046200033a565b62000116565b005b6002546040519081526020015b60405180910390f35b620000ca620000af3660046200037b565b6000908152600160205260409020546001600160a01b031690565b6040516001600160a01b03909116815260200162000095565b62000086620001e5565b6000546001600160a01b0316620000ca565b620000866200011036600462000395565b620001fd565b6200012062000280565b600060025490508084848460405162000139906200032c565b9384526020840192909252604083015260ff166060820152608001604051809103906000f08015801562000171573d6000803e3d6000fd5b50600082815260016020526040812080546001600160a01b0319166001600160a01b0393909316929092179091556002805491620001af83620003c7565b909155505060405181907f01a6d33d95d2560a8c53f00317beb1d0364b3ecf2d43f647d2b4671df27f4f4590600090a250505050565b620001ef62000280565b620001fb6000620002dc565b565b6200020762000280565b6001600160a01b038116620002725760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6200027d81620002dc565b50565b6000546001600160a01b03163314620001fb5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640162000269565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b612c5680620003f083390190565b6000806000606084860312156200035057600080fd5b8335925060208401359150604084013560ff811681146200037057600080fd5b809150509250925092565b6000602082840312156200038e57600080fd5b5035919050565b600060208284031215620003a857600080fd5b81356001600160a01b0381168114620003c057600080fd5b9392505050565b600060018201620003e857634e487b7160e01b600052601160045260246000fd5b506001019056fe610120604081905260006101008190526200001d91600b9162000497565b506040805160208101918290526000908190526200003e91600c9162000497565b503480156200004c57600080fd5b5060405162002c5638038062002c568339810160408190526200006f916200053d565b6040518060400160405280600581526020016444524f502360d81b815250620000a385620001d660201b6200127c1760201c565b604051602001620000b6929190620005b2565b6040516020818303038152906040526040518060400160405280600581526020016444524f502360d81b815250620000f986620001d660201b6200127c1760201c565b6040516020016200010c929190620005b2565b60408051601f1981840301815291905281516200013190600090602085019062000497565b5080516200014790600190602084019062000497565b505050620001646200015e6200027a60201b60201c565b6200027e565b60008111620001ad5760405162461bcd60e51b815260206004820152601060248201526f494e56414c49445f56455253494f4e5360801b60448201526064015b60405180910390fd5b608084905260a083905260c082905260e0819052620001cc32620002d0565b5050505062000625565b60606000620001f0836200034f60201b6200130f1760201c565b60010190506000816001600160401b03811115620002125762000212620005d3565b6040519080825280601f01601f1916602001820160405280156200023d576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846200024757509392505050565b3390565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b620002da62000439565b6001600160a01b038116620003415760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620001a4565b6200034c816200027e565b50565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831062000399577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310620003c6576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310620003e557662386f26fc10000830492506010015b6305f5e1008310620003fe576305f5e100830492506008015b61271083106200041357612710830492506004015b6064831062000426576064830492506002015b600a831062000433576001015b92915050565b600a546001600160a01b03163314620004955760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620001a4565b565b828054620004a590620005e9565b90600052602060002090601f016020900481019282620004c9576000855562000514565b82601f10620004e457805160ff191683800117855562000514565b8280016001018555821562000514579182015b8281111562000514578251825591602001919060010190620004f7565b506200052292915062000526565b5090565b5b8082111562000522576000815560010162000527565b600080600080608085870312156200055457600080fd5b505082516020840151604085015160609095015191969095509092509050565b6000815160005b818110156200059757602081850181015186830152016200057b565b81811115620005a7576000828601525b509290920192915050565b6000620005cb620005c4838662000574565b8462000574565b949350505050565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620005fe57607f821691505b6020821081036200061f57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e0516125e262000674600039600081816106540152610fcb015260008181610512015261102d0152600081816105b80152610f670152600061033501526125e26000f3fe6080604052600436106101e35760003560e01c806358326b7a11610102578063a0712d6811610095578063d5abeb0111610064578063d5abeb01146105a9578063e985e9c5146105dc578063f2fde38b14610625578063f8b1cb3c1461064557600080fd5b8063a0712d6814610536578063a22cb46514610549578063b88d4fde14610569578063c87b56dd1461058957600080fd5b806379575294116100d157806379575294146104b05780638da5cb5b146104d057806395d89b41146104ee578063a035b1fe1461050357600080fd5b806358326b7a1461042e5780636352211e1461045b57806370a082311461047b578063715018a61461049b57600080fd5b80632a778c9b1161017a57806338bd05e01161014957806338bd05e0146103b95780633ccfd60b146103d957806342842e0e146103ee5780634f6ccce71461040e57600080fd5b80632a778c9b146103265780632f745c591461035957806330176e1314610379578063361c60361461039957600080fd5b8063095ea7b3116101b6578063095ea7b3146102b057806317f38959146102d257806318160ddd146102e757806323b872dd1461030657600080fd5b806301ffc9a7146101e857806306fdde031461021d57806307fdb4ea1461023f578063081812fc14610290575b600080fd5b3480156101f457600080fd5b50610208610203366004611fe3565b610678565b60405190151581526020015b60405180910390f35b34801561022957600080fd5b506102326106a3565b6040516102149190612058565b34801561024b57600080fd5b5061027861025a366004612080565b6001600160a01b039081166000908152600e60205260409020541690565b6040516001600160a01b039091168152602001610214565b34801561029c57600080fd5b506102786102ab36600461209d565b610735565b3480156102bc57600080fd5b506102d06102cb3660046120b6565b61075c565b005b3480156102de57600080fd5b50610232610876565b3480156102f357600080fd5b506008545b604051908152602001610214565b34801561031257600080fd5b506102d06103213660046120e2565b610885565b34801561033257600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006102f8565b34801561036557600080fd5b506102f86103743660046120b6565b6108b6565b34801561038557600080fd5b506102d06103943660046121af565b61094c565b3480156103a557600080fd5b506102d06103b43660046121f8565b61096b565b3480156103c557600080fd5b506102d06103d436600461221f565b610c4c565b3480156103e557600080fd5b506102d0610c82565b3480156103fa57600080fd5b506102d06104093660046120e2565b610cb9565b34801561041a57600080fd5b506102f861042936600461209d565b610cd4565b34801561043a57600080fd5b5061044e61044936600461209d565b610d67565b604051610214919061226e565b34801561046757600080fd5b5061027861047636600461209d565b610e34565b34801561048757600080fd5b506102f8610496366004612080565b610e94565b3480156104a757600080fd5b506102d0610f1a565b3480156104bc57600080fd5b506102d06104cb3660046121af565b610f2e565b3480156104dc57600080fd5b50600a546001600160a01b0316610278565b3480156104fa57600080fd5b50610232610f49565b34801561050f57600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006102f8565b6102d061054436600461209d565b610f58565b34801561055557600080fd5b506102d06105643660046122c6565b611159565b34801561057557600080fd5b506102d06105843660046122f9565b611164565b34801561059557600080fd5b506102326105a436600461209d565b61119c565b3480156105b557600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006102f8565b3480156105e857600080fd5b506102086105f736600461221f565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561063157600080fd5b506102d0610640366004612080565b611203565b34801561065157600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006102f8565b60006001600160e01b0319821663780e9d6360e01b148061069d575061069d826113e7565b92915050565b6060600080546106b290612379565b80601f01602080910402602001604051908101604052809291908181526020018280546106de90612379565b801561072b5780601f106107005761010080835404028352916020019161072b565b820191906000526020600020905b81548152906001019060200180831161070e57829003601f168201915b5050505050905090565b600061074082611437565b506000908152600460205260409020546001600160a01b031690565b600061076782610e34565b9050806001600160a01b0316836001600160a01b0316036107d95760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806107f557506107f581336105f7565b6108675760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060648201526084016107d0565b6108718383611496565b505050565b6060600b80546106b290612379565b61088f3382611504565b6108ab5760405162461bcd60e51b81526004016107d0906123b3565b610871838383611583565b60006108c183610e94565b82106109235760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084016107d0565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6109546116f4565b805161096790600c906020840190611eef565b5050565b6000838152600d6020526040902060085484106109b95760405162461bcd60e51b815260206004820152600c60248201526b13d55517d3d197d093d5539160a21b60448201526064016107d0565b6040516331a9108f60e11b81526004810185905233903090636352211e90602401602060405180830381865afa1580156109f7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1b9190612400565b6001600160a01b031614610a415760405162461bcd60e51b81526004016107d09061241d565b600060018083015460ff1690811115610a5c57610a5c612258565b14610a9b5760405162461bcd60e51b815260206004820152600f60248201526e1053149150511657d3555510551151608a1b60448201526064016107d0565b6001600160a01b038381166000908152600e60205260409020541680610b51576040516331a9108f60e11b81526004810184905233906001600160a01b03861690636352211e90602401602060405180830381865afa158015610b02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b269190612400565b6001600160a01b031614610b4c5760405162461bcd60e51b81526004016107d09061241d565b610be4565b6040516331a9108f60e11b81526004810184905233906001600160a01b03831690636352211e906024016020604051808303816000875af1158015610b9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbe9190612400565b6001600160a01b031614610be45760405162461bcd60e51b81526004016107d09061241d565b6001828101805460ff1916828002179055506002820180546001600160a01b0319166001600160a01b0386161790556003820183905560405185907fe0ff833392b9f001daba1da86ad0f9c9ab3f34ddd5a7dc6f7d3dffee0df8110e90600090a25050505050565b610c546116f4565b6001600160a01b039182166000908152600e6020526040902080546001600160a01b03191691909216179055565b610c8a6116f4565b6040514790339082156108fc029083906000818181858888f19350505050158015610967573d6000803e3d6000fd5b61087183838360405180602001604052806000815250611164565b6000610cdf60085490565b8210610d425760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b60648201526084016107d0565b60088281548110610d5557610d55612444565b90600052602060002001549050919050565b610d6f611f73565b6008548210610db35760405162461bcd60e51b815260206004820152601060248201526f1253959053125117d513d2d15397d25160821b60448201526064016107d0565b6000828152600d602090815260409182902082516060810190935280548352600180820154919284019160ff1690811115610df057610df0612258565b6001811115610e0157610e01612258565b81526040805180820190915260028301546001600160a01b03168152600390920154602083810191909152015292915050565b6000818152600260205260408120546001600160a01b03168061069d5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016107d0565b60006001600160a01b038216610efe5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016107d0565b506001600160a01b031660009081526003602052604090205490565b610f226116f4565b610f2c600061174e565b565b610f366116f4565b805161096790600b906020840190611eef565b6060600180546106b290612379565b6000610f6360085490565b90507f00000000000000000000000000000000000000000000000000000000000000008110610fc95760405162461bcd60e51b815260206004820152601260248201527113505617d4d55414131657d4915050d2115160721b60448201526064016107d0565b7f000000000000000000000000000000000000000000000000000000000000000082111561102b5760405162461bcd60e51b815260206004820152600f60248201526e24a72b20a624a22fab22a929a4a7a760891b60448201526064016107d0565b7f0000000000000000000000000000000000000000000000000000000000000000341461108a5760405162461bcd60e51b815260206004820152600d60248201526c494e56414c49445f46554e445360981b60448201526064016107d0565b61109433826117a0565b60408051606081018252838152600060208083018281528451808601865283815280830184905284860152858352600d90915292902081518155915160018084018054939493909160ff199091169083818111156110f4576110f4612258565b021790555060409182015180516002830180546001600160a01b0319166001600160a01b03909216919091179055602001516003909101555181907f176b02bb2d12439ff7a20b59f402cca16c76f50508b13ef3166a600eb719354a90600090a25050565b6109673383836117ba565b61116e3383611504565b61118a5760405162461bcd60e51b81526004016107d0906123b3565b61119684848484611888565b50505050565b60606111a782611437565b60006111b16118bb565b905060008151116111d157604051806020016040528060008152506111fc565b806111db8461127c565b6040516020016111ec92919061245a565b6040516020818303038152906040525b9392505050565b61120b6116f4565b6001600160a01b0381166112705760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107d0565b6112798161174e565b50565b606060006112898361130f565b600101905060008167ffffffffffffffff8111156112a9576112a9612123565b6040519080825280601f01601f1916602001820160405280156112d3576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846112dd57509392505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b831061134e5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef8100000000831061137a576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061139857662386f26fc10000830492506010015b6305f5e10083106113b0576305f5e100830492506008015b61271083106113c457612710830492506004015b606483106113d6576064830492506002015b600a831061069d5760010192915050565b60006001600160e01b031982166380ac58cd60e01b148061141857506001600160e01b03198216635b5e139f60e01b145b8061069d57506301ffc9a760e01b6001600160e01b031983161461069d565b6000818152600260205260409020546001600160a01b03166112795760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016107d0565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906114cb82610e34565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061151083610e34565b9050806001600160a01b0316846001600160a01b0316148061155757506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b8061157b5750836001600160a01b031661157084610735565b6001600160a01b0316145b949350505050565b826001600160a01b031661159682610e34565b6001600160a01b0316146115bc5760405162461bcd60e51b81526004016107d090612489565b6001600160a01b03821661161e5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016107d0565b61162b83838360016118ca565b826001600160a01b031661163e82610e34565b6001600160a01b0316146116645760405162461bcd60e51b81526004016107d090612489565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600a546001600160a01b03163314610f2c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107d0565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b610967828260405180602001604052806000815250611a0a565b816001600160a01b0316836001600160a01b03160361181b5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016107d0565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611893848484611583565b61189f84848484611a3d565b6111965760405162461bcd60e51b81526004016107d0906124ce565b6060600c80546106b290612379565b6118d684848484611b3e565b60018111156119455760405162461bcd60e51b815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e7365637574697665207472604482015274185b9cd9995c9cc81b9bdd081cdd5c1c1bdc9d1959605a1b60648201526084016107d0565b816001600160a01b0385166119a15761199c81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b6119c4565b836001600160a01b0316856001600160a01b0316146119c4576119c48582611bc6565b6001600160a01b0384166119e0576119db81611c63565b611a03565b846001600160a01b0316846001600160a01b031614611a0357611a038482611d12565b5050505050565b611a148383611d56565b611a216000848484611a3d565b6108715760405162461bcd60e51b81526004016107d0906124ce565b60006001600160a01b0384163b15611b3357604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611a81903390899088908890600401612520565b6020604051808303816000875af1925050508015611abc575060408051601f3d908101601f19168201909252611ab99181019061255d565b60015b611b19573d808015611aea576040519150601f19603f3d011682016040523d82523d6000602084013e611aef565b606091505b508051600003611b115760405162461bcd60e51b81526004016107d0906124ce565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061157b565b506001949350505050565b6001811115611196576001600160a01b03841615611b84576001600160a01b03841660009081526003602052604081208054839290611b7e908490612590565b90915550505b6001600160a01b03831615611196576001600160a01b03831660009081526003602052604081208054839290611bbb9084906125a7565b909155505050505050565b60006001611bd384610e94565b611bdd9190612590565b600083815260076020526040902054909150808214611c30576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090611c7590600190612590565b60008381526009602052604081205460088054939450909284908110611c9d57611c9d612444565b906000526020600020015490508060088381548110611cbe57611cbe612444565b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480611cf657611cf66125bf565b6001900381819060005260206000200160009055905550505050565b6000611d1d83610e94565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b6001600160a01b038216611dac5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016107d0565b6000818152600260205260409020546001600160a01b031615611e115760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016107d0565b611e1f6000838360016118ca565b6000818152600260205260409020546001600160a01b031615611e845760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016107d0565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b828054611efb90612379565b90600052602060002090601f016020900481019282611f1d5760008555611f63565b82601f10611f3657805160ff1916838001178555611f63565b82800160010185558215611f63579182015b82811115611f63578251825591602001919060010190611f48565b50611f6f929150611fb8565b5090565b6040805160608101909152600080825260208201908152602001611fb3604051806040016040528060006001600160a01b03168152602001600081525090565b905290565b5b80821115611f6f5760008155600101611fb9565b6001600160e01b03198116811461127957600080fd5b600060208284031215611ff557600080fd5b81356111fc81611fcd565b60005b8381101561201b578181015183820152602001612003565b838111156111965750506000910152565b60008151808452612044816020860160208601612000565b601f01601f19169290920160200192915050565b6020815260006111fc602083018461202c565b6001600160a01b038116811461127957600080fd5b60006020828403121561209257600080fd5b81356111fc8161206b565b6000602082840312156120af57600080fd5b5035919050565b600080604083850312156120c957600080fd5b82356120d48161206b565b946020939093013593505050565b6000806000606084860312156120f757600080fd5b83356121028161206b565b925060208401356121128161206b565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff8084111561215457612154612123565b604051601f8501601f19908116603f0116810190828211818310171561217c5761217c612123565b8160405280935085815286868601111561219557600080fd5b858560208301376000602087830101525050509392505050565b6000602082840312156121c157600080fd5b813567ffffffffffffffff8111156121d857600080fd5b8201601f810184136121e957600080fd5b61157b84823560208401612139565b60008060006060848603121561220d57600080fd5b8335925060208401356121128161206b565b6000806040838503121561223257600080fd5b823561223d8161206b565b9150602083013561224d8161206b565b809150509250929050565b634e487b7160e01b600052602160045260246000fd5b81518152602082015160808201906002811061229a57634e487b7160e01b600052602160045260246000fd5b80602084015250604083015160018060a01b038151166040840152602081015160608401525092915050565b600080604083850312156122d957600080fd5b82356122e48161206b565b91506020830135801515811461224d57600080fd5b6000806000806080858703121561230f57600080fd5b843561231a8161206b565b9350602085013561232a8161206b565b925060408501359150606085013567ffffffffffffffff81111561234d57600080fd5b8501601f8101871361235e57600080fd5b61236d87823560208401612139565b91505092959194509250565b600181811c9082168061238d57607f821691505b6020821081036123ad57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b60006020828403121561241257600080fd5b81516111fc8161206b565b6020808252600d908201526c24a72b20a624a22fa7aba722a960991b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6000835161246c818460208801612000565b835190830190612480818360208801612000565b01949350505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906125539083018461202c565b9695505050505050565b60006020828403121561256f57600080fd5b81516111fc81611fcd565b634e487b7160e01b600052601160045260246000fd5b6000828210156125a2576125a261257a565b500390565b600082198211156125ba576125ba61257a565b500190565b634e487b7160e01b600052603160045260246000fdfea164736f6c634300080e000aa164736f6c634300080e000a",
  "devdoc": {
    "author": "Maxime Aubanel - @sshmaxime",
    "kind": "dev",
    "methods": {
      "createDrop(uint256,uint256,uint8)": {
        "details": "Create a DROP."
      },
      "drop(uint256)": {
        "details": "Return the DROP item matching the drop id."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "totalSupply()": {
        "details": "Return the current supply."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Store",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Store.sol:Store",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3526,
        "contract": "contracts/Store.sol:Store",
        "label": "dropIdToDrop",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_contract(Drop)3510)"
      },
      {
        "astId": 3529,
        "contract": "contracts/Store.sol:Store",
        "label": "TOTAL_SUPPLY",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(Drop)3510": {
        "encoding": "inplace",
        "label": "contract Drop",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_contract(Drop)3510)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => contract Drop)",
        "numberOfBytes": "32",
        "value": "t_contract(Drop)3510"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}