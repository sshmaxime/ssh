/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    Cube003_1: THREE.Mesh;
    Cube003_2: THREE.Mesh;
    Cube003_3: THREE.Mesh;
    Cube001_1: THREE.Mesh;
    Cube001_2: THREE.Mesh;
    Cylinder003_1: THREE.Mesh;
    Cylinder003_2: THREE.Mesh;
    Cylinder003_3: THREE.Mesh;
    Torus001: THREE.Mesh;
    Cylinder002: THREE.Mesh;
    Cylinder003: THREE.Mesh;
    Cube008: THREE.Mesh;
    Cube008_1: THREE.Mesh;
    Cube009: THREE.Mesh;
    Cube009_1: THREE.Mesh;
    Cube007: THREE.Mesh;
    Cube007_1: THREE.Mesh;
  };
  materials: {
    ["Material.002"]: THREE.MeshStandardMaterial;
    Material: THREE.MeshStandardMaterial;
    ["Material.001"]: THREE.MeshStandardMaterial;
    ["Material.006"]: THREE.MeshStandardMaterial;
    ["Material.004"]: THREE.MeshStandardMaterial;
    ["Material.003"]: THREE.MeshStandardMaterial;
  };
};

export default function Model({ ...props }: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>();
  const { nodes, materials } = useGLTF("/models/key.glb") as GLTFResult;

  for (const k in nodes) {
    if ((nodes as any)[k].material) {
      // ((nodes as any)[k] as any).material.color = null as any;
      // ((nodes as any)[k] as any).material.toneMapped = false;
    }
  }
  return (
    <group ref={group} {...props} dispose={null}>
      <group position={[0, -0.25, 1]} rotation={[0.01, 0, 0]}>
        <mesh geometry={nodes.Cube003_1.geometry} material={nodes.Cube003_1.material} />
        <mesh geometry={nodes.Cube003_2.geometry} material={materials.Material} />
        <mesh geometry={nodes.Cube003_3.geometry} material={materials["Material.001"]} />
      </group>
      <group position={[0.45, -0.18, -0.27]} rotation={[2.93, 1.4, -3]}>
        <mesh geometry={nodes.Cube001_1.geometry} material={nodes.Cube001_1.material} />
        <mesh geometry={nodes.Cube001_2.geometry} material={nodes.Cube001_2.material} />
      </group>
      <group position={[0.03, -0.21, -0.45]} rotation={[0.01, 0, 0]}>
        <mesh geometry={nodes.Cylinder003_1.geometry} material={nodes.Cylinder003_1.material} />
        <mesh geometry={nodes.Cylinder003_2.geometry} material={nodes.Cylinder003_2.material} />
        <mesh geometry={nodes.Cylinder003_3.geometry} material={nodes.Cylinder003_3.material} />
      </group>
      <mesh
        geometry={nodes.Torus001.geometry}
        material={nodes.Torus001.material}
        position={[-0.4, 0.03, -0.42]}
        rotation={[0.01, 1.49, Math.PI]}
        scale={0.39}
      />
      <mesh
        geometry={nodes.Cylinder002.geometry}
        material={nodes.Cylinder002.material}
        position={[0.14, -0.18, -0.37]}
        rotation={[1.58, 0, -0.72]}
        scale={[0.01, 0.02, 0.01]}
      />
      <mesh
        geometry={nodes.Cylinder003.geometry}
        material={nodes.Cylinder003.material}
        position={[0.45, -0.22, -0.3]}
        rotation={[1.58, 0, 0.26]}
        scale={[0.01, 0.02, 0.01]}
      />
      <group position={[0.03, -0.25, 1.31]} rotation={[0.01, 0, 0]}>
        <mesh geometry={nodes.Cube008.geometry} material={nodes.Cube008.material} />
        <mesh geometry={nodes.Cube008_1.geometry} material={nodes.Cube008_1.material} />
      </group>
      <group position={[0.03, -0.25, 1.11]} rotation={[0.01, 0, 0]}>
        <mesh geometry={nodes.Cube009.geometry} material={nodes.Cube009.material} />
        <mesh geometry={nodes.Cube009_1.geometry} material={nodes.Cube009_1.material} />
      </group>
      <group position={[-0.15, -0.25, 1.85]} rotation={[0.01, 0, 0]}>
        <mesh geometry={nodes.Cube007.geometry} material={nodes.Cube007.material} />
        <mesh geometry={nodes.Cube007_1.geometry} material={nodes.Cube007_1.material} />
      </group>
    </group>
  );
}

useGLTF.preload("/models/key.glb");
