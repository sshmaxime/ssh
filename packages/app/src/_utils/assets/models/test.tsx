/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    Tube: THREE.Mesh
    Tube2_4: THREE.Mesh
    Tube2_5: THREE.Mesh
    Tube_1: THREE.Mesh
    Tube2_1_1: THREE.Mesh
    Tube2_1_2: THREE.Mesh
    Tube_2: THREE.Mesh
    Tube2_2_1: THREE.Mesh
    Tube2_2_2: THREE.Mesh
    Tube_3: THREE.Mesh
    Tube2_3_1: THREE.Mesh
    Tube2_3_2: THREE.Mesh
    Absorber1: THREE.Mesh
    Trucks: THREE.Mesh
    Deck: THREE.Mesh
    Placeholder: THREE.Mesh
    PlaceholderId: THREE.Mesh
    PlaceholderName: THREE.Mesh
  }
  materials: {
    Wheels: THREE.MeshStandardMaterial
    Trucks: THREE.MeshStandardMaterial
    Deck: THREE.MeshStandardMaterial
    Placeholder: THREE.MeshStandardMaterial
    PlaceholderId: THREE.MeshStandardMaterial
    PlaceholderName: THREE.MeshStandardMaterial
  }
}

export default function Model({ ...props }: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>()
  const { nodes, materials } = useGLTF('/skate-transformed.glb') as GLTFResult
  return (
    <group ref={group} {...props} dispose={null}>
      <mesh geometry={nodes.Tube.geometry} material={nodes.Tube.material} rotation={[Math.PI / 2, 0, 0]} />
      <group rotation={[Math.PI / 2, 0, 0]}>
        <mesh geometry={nodes.Tube2_4.geometry} material={nodes.Tube2_4.material} />
        <mesh geometry={nodes.Tube2_5.geometry} material={nodes.Tube2_5.material} />
      </group>
      <mesh geometry={nodes.Tube_1.geometry} material={nodes.Tube_1.material} rotation={[Math.PI / 2, 0, 0]} />
      <group rotation={[Math.PI / 2, 0, 0]}>
        <mesh geometry={nodes.Tube2_1_1.geometry} material={nodes.Tube2_1_1.material} />
        <mesh geometry={nodes.Tube2_1_2.geometry} material={nodes.Tube2_1_2.material} />
      </group>
      <mesh geometry={nodes.Tube_2.geometry} material={nodes.Tube_2.material} rotation={[Math.PI / 2, 0, 0]} />
      <group rotation={[Math.PI / 2, 0, 0]}>
        <mesh geometry={nodes.Tube2_2_1.geometry} material={nodes.Tube2_2_1.material} />
        <mesh geometry={nodes.Tube2_2_2.geometry} material={nodes.Tube2_2_2.material} />
      </group>
      <mesh geometry={nodes.Tube_3.geometry} material={nodes.Tube_3.material} rotation={[Math.PI / 2, 0, 0]} />
      <group rotation={[Math.PI / 2, 0, 0]}>
        <mesh geometry={nodes.Tube2_3_1.geometry} material={nodes.Tube2_3_1.material} />
        <mesh geometry={nodes.Tube2_3_2.geometry} material={nodes.Tube2_3_2.material} />
      </group>
      <mesh geometry={nodes.Absorber1.geometry} material={nodes.Absorber1.material} rotation={[Math.PI / 2, 0, 0]} />
      <mesh geometry={nodes.Trucks.geometry} material={nodes.Trucks.material} rotation={[Math.PI / 2, 0, 0]} />
      <mesh geometry={nodes.Deck.geometry} material={materials.Deck} rotation={[Math.PI / 2, 0, 0]} />
      <mesh geometry={nodes.Placeholder.geometry} material={materials.Placeholder} rotation={[Math.PI / 2, 0, 0]} />
      <mesh geometry={nodes.PlaceholderId.geometry} material={materials.PlaceholderId} rotation={[Math.PI / 2, 0, 0]} />
      <mesh
        geometry={nodes.PlaceholderName.geometry}
        material={materials.PlaceholderName}
        rotation={[Math.PI / 2, 0, 0]}
      />
    </group>
  )
}

useGLTF.preload('/skate-transformed.glb')
