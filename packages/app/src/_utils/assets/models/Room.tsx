/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    Plane: THREE.Mesh;
    Bed: THREE.Mesh;
    Desk: THREE.Mesh;
    Miffy_XL_Lamp_H80cm: THREE.Mesh;
    Cloner: THREE.Mesh;
    Cloner1: THREE.Mesh;
  };
  materials: {
    ["default"]: THREE.MeshStandardMaterial;
  };
};

export default function Model({ ...props }: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>();
  const { nodes, materials } = useGLTF("/models/room.glb") as GLTFResult;
  return (
    <group ref={group} {...props} dispose={null}>
      <mesh
        geometry={nodes.Plane.geometry}
        material={nodes.Plane.material}
        rotation={[Math.PI / 2, 0, 0]}
        scale={0.17}
      />
      <mesh
        geometry={nodes.Bed.geometry}
        material={nodes.Bed.material}
        rotation={[Math.PI / 2, 0, 0]}
        scale={0.17}
      />
      <mesh
        geometry={nodes.Desk.geometry}
        material={nodes.Desk.material}
        rotation={[Math.PI / 2, 0, 0]}
        scale={0.17}
      />
      <mesh
        geometry={nodes.Miffy_XL_Lamp_H80cm.geometry}
        material={nodes.Miffy_XL_Lamp_H80cm.material}
        rotation={[Math.PI / 2, 0, 0]}
        scale={0.17}
      />
      <mesh
        geometry={nodes.Cloner.geometry}
        material={nodes.Cloner.material}
        rotation={[Math.PI / 2, 0, 0]}
        scale={0.17}
      />
      <mesh
        geometry={nodes.Cloner1.geometry}
        material={nodes.Cloner1.material}
        rotation={[Math.PI / 2, 0, 0]}
        scale={0.17}
      />
    </group>
  );
}

useGLTF.preload("/room.glb");
